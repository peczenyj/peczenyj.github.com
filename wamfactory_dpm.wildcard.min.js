// register tcf v1/2 apis
(function(){
	var locateFrame = function(frameName){
		var frame = window, cmpFrame = null;
		while(!cmpFrame) {
			try {
				if(frame.frames[frameName]){
					cmpFrame = frame;
				}
			} catch(e) {}
			if(frame === window.top) break;
			frame = frame.parent;
		}
		return cmpFrame;
	};

	var cmpFrame, returnFieldName, cmpCallbacks = {};
	if (cmpFrame = locateFrame('__tcfapiLocator') ) {
		returnFieldName = '__tcfapiReturn';
		window.__tcfapi = function(cmd, version, callback, arg) {
			var callId = Math.random() + "";
			var msg = {__tcfapiCall: {
				command: cmd,
				parameter: arg,
				version: version,
				callId: callId
			}};

			cmpCallbacks[callId] = callback;
			cmpFrame.postMessage(msg, '*');
		};
		console.log("register 'window.__tcfapi' to handle TCF v2");
	} else if (cmpFrame = locateFrame('__cmpLocator')) {
		returnFieldName = '__cmpReturn';
		window.__cmp = function(cmd, arg, callback) {
			var callId = Math.random() + "";
			var msg = {__cmpCall: {
				command: cmd,
				parameter: arg,
				callId: callId
			}};

			cmpCallbacks[callId] = callback;
			cmpFrame.postMessage(msg, '*');
		};
		console.log("register 'window.__cmp' to handle TCF v1");
	} else {
		// nothing to do
		console.log("unable to find cmp");
		return
	}

	// add event listener message

	var postMessageHandler = function(event) {
		var json = {};
		try{
			json = typeof event.data === "string"? JSON.parse(event.data): event.data;
		}catch(ignore){}
		var payload = json[returnFieldName];
		if(payload) {
			if (typeof cmpCallbacks[payload.callId] === 'function') {
				cmpCallbacks[payload.callId](payload.returnValue, payload.success);
				delete cmpCallbacks[payload.callId];
			}
		}
	};

	window.addEventListener('message', postMessageHandler, false);
}());

// begin first party cookie
// WeboFirstPartyCookieManager class
function WeboFirstPartyCookieManager(c){
	console.log("config:",c);

	var checkCookieEnabled = function () {
		var enabled = (navigator.cookieEnabled) ? true : false,
		ua = navigator.userAgent.toLowerCase(),
		isIE = (ua.indexOf('msie') !== -1 || ua.indexOf('trident') !== -1),
		testName = "__wtestcookie";

		if ((navigator.cookieEnabled === undefined) || isIE) {
			document.cookie = testName;
			enabled = (document.cookie.indexOf(testName) !== -1) ? true : false;
		}

		return enabled;
	},
	isCookieEnabled = checkCookieEnabled(),
	weboEncodingChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@-",
	randomBounded = function(bound){
		return Math.floor(Math.random()*bound);
	},
	dateZero = new Date(0),
	setRawCookie = function(name, value, expires, path, domain, secure, sameSite) {
		var c = name + "=" + escape(value) +
			((expires) ? "; expires=" + expires.toGMTString() : "") +
			((path)    ? "; path=" + path : "") +
			((domain)  ? "; domain=" + domain : "") +
			((secure)  ? "; secure" : "") +
			((sameSite)? "; SameSite=" + sameSite : "");
		console.log("setCookie",c);
		document.cookie = c;
	},
	getTopDomain = function(path, secure, sameSite){
		var i,h,
		baseName = '__wtest_top_domain',
		testName = baseName,
		hostname = document.location.hostname.split('.');

		while(document.cookie.indexOf(testName)>-1){
			testName= baseName + randomBounded(100000);
		}

		for(i=hostname.length-2; i>=0; i--) {
			h = hostname.slice(i).join('.');
			// name, value, expires, path, domain, secure, sameSite
			setRawCookie(testName, 1, null, path, h, secure, sameSite);
			if(document.cookie.indexOf(testName)>-1){
				// We were able to store a cookie! This must be it
				setRawCookie(testName, "", dateZero, path, h, secure, sameSite);
				return h;
			}
		}
	},
	topLevelDomain = null,
	setCookie = function(name, value, expires, path, domain, secure, sameSite){
		if(domain === "auto"){
			if(topLevelDomain == null){
				topLevelDomain = getTopDomain(path, secure, sameSite);
			}
			domain = topLevelDomain;
		}
		setRawCookie(name, value, expires, path, domain, secure, sameSite);
	},
	extract = function(object,field,fallback){
		if(object != null && object.hasOwnProperty(field)){
			return object[field];
		}
		return fallback;
	},
	configPrefix = "cookie",
	cookieName = extract(c,configPrefix+"Name","AFFICHE_C"),        // default cookie name for 1st party cookie
	cookieTTL = extract(c,configPrefix+"TTL",90*24*60*60*1000),     // default cookie ttl 90 days
	cookiePath = extract(c,configPrefix+"Path","/"),                // default path /
	cookieDomain = extract(c,configPrefix+"Domain","auto"),         // auto: get top level domain
	cookieSecure = extract(c,configPrefix+"Secure",false),          // should be true if SameSite=None
	cookieSameSite = extract(c,configPrefix+"SameSite","Strict"),   // TODO to be confirmed
	shouldRefreshCookie = extract(c,"shouldRefreshCookie",false),   // TODO to be confirmed
	firstPartyIDQueryArg = extract(c,"firstPartyIDQueryArg","first_party_id"),
	getCookieValue = function(cookieName) {
		var arg = cookieName + "=",
		alen = arg.length,
		clen = document.cookie.length,
		i = 0;
		while (i < clen) {
			var j = i + alen;
			if (document.cookie.substring(i, j) == arg){
				var offset = j,
				endstr = document.cookie.indexOf(";", offset);
				if (endstr == -1){
					endstr = document.cookie.length;
				}
				return unescape(document.cookie.substring(offset, endstr));
			}
			i = document.cookie.indexOf(" ", i) + 1;
			if (i == 0) break;
		}
		return null;
	},
	setFirstPartyCookie = function(value){
		var expires = new Date();
		expires.setTime(expires.getTime() + cookieTTL)
		setCookie(cookieName,
			value,
			expires,
			cookiePath,
			cookieDomain,
			cookieSecure,
			cookieSameSite);
	},
	deleteFirstPartyCookie = function(){
		setCookie(cookieName,
			"",
			dateZero,
			cookiePath,
			cookieDomain,
			cookieSecure,
			cookieSameSite);
	},
	getFirstPartyCookie = function(){
		console.log("getting cookie");
		var cookieValue = getCookieValue(cookieName);
		if(cookieValue == null) {
			return null // not found
		}

		if(cookieValue.length != 14){
			console.log("bad cookie size, expect 14 got: " + cookieValue.length )
			deleteFirstPartyCookie();
			return null
		}

		var firstChar = cookieValue.charAt(0);
		if( firstChar == "@" || firstChar == "!" || firstChar == "_"){
			console.log("not a regular weborama id: " + cookieValue)
			deleteFirstPartyCookie();
			return null
		}

		var invalidChars = new RegExp("[^" + weboEncodingChars + "]");
		if(invalidChars.test(cookieValue)){
			console.log("find unexpected chars in weborama id: " + cookieValue)
			deleteFirstPartyCookie();
			return null
		}

		return cookieValue;
	},
	generateCookie = function(){
		var data = [], first = randomBounded(256);
		while(first >=248 && first <= 251){ // TODO we can change it using math
			// To avoid generate an @ as first char
			first = randomBounded(256);
		}
		data[0] = first;
		for(i=1; i< 8;i++) {
			data[i] = randomBounded(256);
		}
		data[8] = first;

		var output = "",
		keyStr = weboEncodingChars,
		chr1, chr2, chr3, enc1, enc2, enc3, enc4;

		var i = 0;
		while (i < data.length) { // TODO change it to a for loop each 3 elem
			chr1 = data[i++];
			chr2 = data[i++];
			chr3 = data[i++];

			enc1 = chr1 >> 2;
			enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
			enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
			enc4 = chr3 & 63;

			output = output +
			keyStr.charAt(enc1) + keyStr.charAt(enc2) +
			keyStr.charAt(enc3) + keyStr.charAt(enc4);
		}

		return output + // suffix extra two chars in cookie 12+2
		String.fromCharCode(randomBounded(9) + 49) +
		String.fromCharCode(randomBounded(10) + 48);
	};

	this.getFirstPartyCookie = function(){
		if(! isCookieEnabled) {
			console.log("cookie not enable, skip");
			return null;
		}
		var firstPartyCookie = getFirstPartyCookie();

		if(firstPartyCookie == null) {
			console.log("cookie not found, generate and store it")
			firstPartyCookie = generateCookie();

			setFirstPartyCookie(firstPartyCookie);
		} else if (shouldRefreshCookie) {
			console.log("refresh existing cookie");

			setFirstPartyCookie(firstPartyCookie);
		}

		if(firstPartyCookie != null) {
			console.log("using first party cookie: " + firstPartyCookie)
		}

		return firstPartyCookie;
	};

	this.executeCallback = function(callback){
		var firstPartyCookie = this.getFirstPartyCookie();

		callback(firstPartyCookie,isCookieEnabled,cookieDomain);
	};

	this.decorateURL = function(url){
		var sep = ((url.indexOf('?') > 0)? '&' : '?'),
		firstPartyCookie = this.getFirstPartyCookie();

		if(firstPartyCookie != null){
			url += sep + firstPartyIDQueryArg + "=" + firstPartyCookie;
		}

		return url
	};
}

// end first party cookie
window.wamf = function() {
    // "use strict";
    return {
        version: '20200331_01',
        firstPartyCookieConf: {},
        enableFirstPartyCookie: false,
        firstPartyCookieManager: null,
        account: function(e) {
            if (typeof e === 'string' && (/^\d+$/).test(e) === true) {
                this.account = e;
            } else {
                this.account = '';
            }
        },
        querytyp: function(t) {
            if (typeof t === 'string' && (/^\d+$/).test(t) === true) {
                this.typ = t;
            } else {
                this.typ = '';
            }
        },
        enableFirstParty: function(enable){
          this.enableFirstPartyCookie = enable;
        },
        firstPartConf: function(conf){
          this.firstPartyCookieConf = conf;
        },
        eventkey: function(k) {
            if (typeof k === 'string') {
                this.ekey = k;
            } else {
                this.ekey = '';
            }
        },
        eventvalue: function(v) {
            if (typeof v === 'string') {
                this.evalue = v;
            } else {
                this.evalue = '';
            }
        },
        pushWvar: function(z) {
            "object"!==typeof JSON&&(JSON={}),function(){"use strict";function f(t){return 10>t?"0"+t:t}function this_value(){return this.valueOf()}function quote(t){return rx_escapable.lastIndex=0,rx_escapable.test(t)?'"'+t.replace(rx_escapable,function(t){var e=meta[t];return"string"==typeof e?e:"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+t+'"'}function str(t,e){var r,n,o,u,f,a=gap,i=e[t];switch(i&&"object"==typeof i&&"function"==typeof i.toJSON&&(i=i.toJSON(t)),"function"==typeof rep&&(i=rep.call(e,t,i)),typeof i){case"string":return quote(i);case"number":return isFinite(i)?String(i):"null";case"boolean":case"null":return String(i);case"object":if(!i)return"null";if(gap+=indent,f=[],"[object Array]"===Object.prototype.toString.apply(i)){for(u=i.length,r=0;u>r;r+=1)f[r]=str(r,i)||"null";return o=0===f.length?"[]":gap?"[\n"+gap+f.join(",\n"+gap)+"\n"+a+"]":"["+f.join(",")+"]",gap=a,o}if(rep&&"object"==typeof rep)for(u=rep.length,r=0;u>r;r+=1)"string"==typeof rep[r]&&(n=rep[r],o=str(n,i),o&&f.push(quote(n)+(gap?": ":":")+o));else for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(o=str(n,i),o&&f.push(quote(n)+(gap?": ":":")+o));return o=0===f.length?"{}":gap?"{\n"+gap+f.join(",\n"+gap)+"\n"+a+"}":"{"+f.join(",")+"}",gap=a,o}}var rx_one=/^[\],:{}\s]*$/,rx_two=/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,rx_three=/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,rx_four=/(?:^|:|,)(?:\s*\[)+/g,rx_escapable=/[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,rx_dangerous=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;"function"!=typeof Date.prototype.toJSON&&(Date.prototype.toJSON=function(){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},Boolean.prototype.toJSON=this_value,Number.prototype.toJSON=this_value,String.prototype.toJSON=this_value);var gap,indent,meta,rep;"function"!=typeof JSON.stringify&&(meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},JSON.stringify=function(t,e,r){var n;if(gap="",indent="","number"==typeof r)for(n=0;r>n;n+=1)indent+=" ";else"string"==typeof r&&(indent=r);if(rep=e,e&&"function"!=typeof e&&("object"!=typeof e||"number"!=typeof e.length))throw new Error("JSON.stringify");return str("",{"":t})}),"function"!=typeof JSON.parse&&(JSON.parse=function(text,reviver){function walk(t,e){var r,n,o=t[e];if(o&&"object"==typeof o)for(r in o)Object.prototype.hasOwnProperty.call(o,r)&&(n=walk(o,r),void 0!==n?o[r]=n:delete o[r]);return reviver.call(t,e,o)}var j;if(text=String(text),rx_dangerous.lastIndex=0,rx_dangerous.test(text)&&(text=text.replace(rx_dangerous,function(t){return"\\u"+("0000"+t.charCodeAt(0).toString(16)).slice(-4)})),rx_one.test(text.replace(rx_two,"@").replace(rx_three,"]").replace(rx_four,"")))return j=eval("("+text+")"),"function"==typeof reviver?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}();
            if (z.constructor === Array) {
                function unique(tbl) {
                    var a = [],
                        l = tbl.length;
                    for (var i = 0; i < l; i++) {
                        for (var j = i + 1; j < l; j++)
                            if (tbl[i] === tbl[j]) j = ++i;
                        a.push(tbl[i]);
                    }
                    return a;
                }
                if (z[0].match(/(.*):(.*)/) === null) {
                    var Wvartmp = [],
                        Wstrtmp = "",
                        Wn = 0;
                    for (Wn = 0; Wn < z.length; Wn++) {
                        if (Wn % 2 === 1) {
                            Wstrtmp += z[Wn];
                            Wvartmp.push(Wstrtmp);
                        } else Wstrtmp = z[Wn] + ":"
                    }
                    z = Wvartmp;
                }
                z = unique(z);
                z.sort();
                var Wkeys = [],
                    Wkk = [],
                    Wvv = [];
                var Wkeysp = "",
                    Wvarstr = "",
                    Wvarval = "",
                    Wcountval = 0,
                    Wi = 0,
                    Wj = 0;
                Wlabel: for (Wi = 0; Wi < z.length; Wi++) {
                    Wkk = z[Wi].match(/(.*):/);
										while (Wkk[1].indexOf(':')>0) {
											Wkktmp = Wkk[1].match(/(.*):/);
											Wkk[1] = Wkktmp[1];
										}
                    for (var Wj = 0; Wj < Wkeys.length; Wj++) {
                        if (Wkeys[Wj] == Wkk[1]) continue Wlabel;
                    }
                    Wkeys.push(Wkk[1]);
                }
                for (Wi = 0; Wi < Wkeys.length; Wi++) {
                    if (Wi == 0) Wvarstr = '{"' + Wkeys[Wi] + '":';
                    else Wvarstr += '"' + Wkeys[Wi] + '":'
                    Wkeysp = "";
                    Wvarval = "";
                    Wcountval = 0;
                    for (Wj = 0; Wj < z.length; Wj++) {
                        Wkk = z[Wj].match(/(.*):/);
												while (Wkk[1].indexOf(':')>0) {
													Wkktmp = Wkk[1].match(/(.*):/);
													Wkk[1] = Wkktmp[1];
												}
                        Wvv = z[Wj].match(/:(.*)/);
                        Wkeysp = Wkk[1];
                        if ((Wkeysp == Wkk[1]) && Wkk[1] == Wkeys[Wi]) {
                            if (Wvarval == "") Wvarval = '"' + Wvv[1] + '"';
                            else {
                                Wvarval += ',"' + Wvv[1] + '"';
                                Wcountval++;
                            }
                        }
                    }
                    if (Wcountval > 0) Wvarval = '[' + Wvarval + ']';
                    if (Wi + 1 == Wkeys.length) Wvarstr += Wvarval + '}';
                    else Wvarstr += Wvarval + ',';
                }
                this.Wvar = JSON.parse(Wvarstr);
            } else this.Wvar = z;
        },
        _decorateURL: function(url){
          if(! this.enableFirstPartyCookie) {
            return url;
          }

          if (this.firstPartyCookieManager == null){
            this.firstPartyCookieManager = new WeboFirstPartyCookieManager(
              this.firstPartyCookieConf
            );
          }

          return this.firstPartyCookieManager.decorateURL(url);
        },
        _create_element_of_given_type: function(type,url){
            if (type == 'image') {
                var b = new Image();
                b.src = url;
                b.onload = function() { return;};
            } else {
                var b = document.createElement('iframe');
                b.setAttribute('id', 'Wifrm'),
                document.body.appendChild(b),
                b.setAttribute('src', url),
                b.setAttribute( 'style', 'height: 1px; width: 1px; border: 0px none; position: absolute; display: none; left: 0px; top: 0px; z-index: 0;');
            }
        },
        send_after_cmp_check: function(type,url) {
            url = this._decorateURL(url)
            if (typeof window.__tcfapi == 'function') {
              var self = this;
              console.log("register addEventListener tcfv2");
              window.__tcfapi('addEventListener', 2, function(response, success){
                console.log('tcf v2: addEventListener', response, success);
                if (response.eventStatus == 'useractioncomplete') {
                  console.log("TCF V2 gdpr:", response.gdprApplies,"gdpr_consent:", response.tcString);

                  url+= ((url.indexOf("?") == -1) ? "?" : "&");
                  if(!success){
                      url += "gdpr=1&gdpr_cmp_failure=1";
                  } else if(response['gdprApplies']) {
                      url += "gdpr=1&gdpr_consent="+(response['tcString']|| "");
                  } else {
                      url += "gdpr=0";
                  }

                  self._create_element_of_given_type(type, url);

                  window.__tcfapi('removeEventListener', 2, console.log, response.listenerId)
                }
              });
            } else if (typeof window.__cmp == 'function'){
                var self = this;
                window.__cmp('getConsentData', null, function (response, success) {
                    console.log("TCF V1 gdpr:", response.gdprApplies,"gdpr_consent:", response.consentData);

                    url+= ((url.indexOf("?") == -1) ? "?" : "&");
                    if(!success){
                        url += "gdpr=1&gdpr_cmp_failure=1";
                    } else if(response['gdprApplies']) {
                        url += "gdpr=1&gdpr_consent="+(response['consentData']|| "");
                    } else {
                        url += "gdpr=0";
                    }

                    self._create_element_of_given_type(type, url);
                });
            } else {
                // No CMP found, just process the call as usual
                this._create_element_of_given_type(type, url)
            }
        },
        pageSend: function() {
            var WvarPage, WimPage;
            if (typeof this.Wvar != 'object') WvarPage = {};
            else WvarPage = this.Wvar;
            if (this.account != '' && this.typ != '') {
                WvarPage['wamid'] = this.account;
                WvarPage['typ'] = this.typ;
                WvarPage['url'] = encodeURIComponent(document.URL);
                WvarPage['ref'] = encodeURIComponent(document.referrer);
                WvarPageStr = encodeURIComponent(JSON.stringify(WvarPage));
                if (WvarPageStr.length > 1900) {
                	WvarPage['ref'] = '';
                	WvarPageStr = encodeURIComponent(JSON.stringify(WvarPage));
                }
                var domainPrefix = "wf";
                if (2510 == this.account) {
                	domainPrefix = "lbcwf";
                } else if (6949 == this.account){
                	domainPrefix = "wf-ru";
                }
                this.send_after_cmp_check('image','https://' +
                  domainPrefix +
                  '.frontend-preprod.weborama.fr/stream?wamid=' +
                  this.account +
                  '&Wvar=' +
                  WvarPageStr +
                  '&d.r=' +
                  new Date().getTime());
            }
        },
        eventSend: function(t, k, v, w) {
            window.wamf.querytyp(t);
            window.wamf.eventkey(k);
            window.wamf.eventvalue(v);
            if (typeof this.Wvar != 'object') WvarEvent = {};
            else WvarEvent = this.Wvar;
            if (this.account != '' && this.typ != '' && this.ekey != '' && this.evalue != '') {
                WvarEvent['wamid'] = this.account;
                WvarEvent['typ'] = this.typ;
                WvarEvent[this.ekey] = this.evalue;
                WvarEvent['url'] = encodeURIComponent(document.URL);
                WvarEvent['ref'] = encodeURIComponent(document.referrer);
                WvarEventStr = encodeURIComponent(JSON.stringify(WvarEvent));
                if (WvarEventStr.length > 1900) {
                	WvarEvent['ref'] = '';
                	WvarEventStr = encodeURIComponent(JSON.stringify(WvarEvent));
                }
                var domainPrefix = "wf";
                if (2510 == this.account) {
                	domainPrefix = "lbcwf";
                } else if (6949 == this.account){
                	domainPrefix = "wf-ru";
                }
                this.send_after_cmp_check('image','https://' +
                  domainPrefix +
                  '.frontend-preprod.weborama.fr/stream?wamid=' +
                  this.account +
                  '&Wvar=' +
                  WvarEventStr +
                  '&d.r=' +
                  new Date().getTime());
            }
        },
        sync: function(s) {
            if (s != 0) {
                this.send_after_cmp_check('iframe', 'http' +
                      ('https:' == document.location.protocol ? 's' : '') +
                      '://cstatic.weborama.fr/iframe/preprod/' +
                      (2 == s ? 'external' : 'external_ids_sync') +
                      '.html?d.r=' +
                      new Date().getTime());
            }
        },
        // backward compatibility old tag Wamfactory start
        data: [],
        push: function(e, t) {
            this.data.push(e.toString());
            this.data.push(t.toString());
        },
        send: function() {
            window.wamf.pushWvar(this.data);
            window.wamf.pageSend();
        }
        // backward compatibility old tag Wamfactory end
    }
}();

if (typeof window.wamf_callback === "undefined") {
    if (typeof wamid === 'undefined') wamid = '';
    if (typeof typ === 'undefined') typ = '1';
    if (typeof Wvar === 'undefined') Wvar = '';
    if (typeof Wsync === 'undefined') Wsync = 1;
    window.wamf.account(wamid);
    window.wamf.querytyp(typ);
    if (typeof WfirstParty !== 'undefined'){
      window.wamf.enableFirstParty(!! WfirstParty);
    }
    if (typeof WfirstPartyConf !== 'undefined'){
      window.wamf.firstPartConf(WfirstPartyConf);
    }
    window.wamf.pushWvar(Wvar);
    window.wamf.pageSend();
    window.wamf.sync(Wsync);
}

// backward compatibility old tag Wamfactory start
if (typeof window.wamf_callback === "function") {
    window.wamf_callback();
    window.wamf_callback = function() {
        window.wamf.querytyp('1');
        window.wamf.sync(2)
    };
}
