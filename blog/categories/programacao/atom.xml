<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programacao | Peczenyj's Blog]]></title>
  <link href="http://pacman.blog.br/blog/categories/programacao/atom.xml" rel="self"/>
  <link href="http://pacman.blog.br/"/>
  <updated>2014-02-08T16:51:23-02:00</updated>
  <id>http://pacman.blog.br/</id>
  <author>
    <name><![CDATA[Tiago Peczenyj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Hello World orientado a objetos]]></title>
    <link href="http://pacman.blog.br/blog/2008/05/21/hello-world-orientado-objetos/"/>
    <updated>2008-05-21T13:47:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/05/21/hello-world-orientado-objetos</id>
    <content type="html"><![CDATA[<div class='post'>
Hoje em dia é raro um desenvolvedor conhecer bem apenas uma linguagem. Em nome da multidisciplinaridade, decidi mostrar algums exemplos do mesmo programa: uma classe HelloWord com um construtor que recebe uma mensagem ("ola mundo") e um método show() que imprime essa mensagem.<br /><br />Vejamos um exemplo em C++<br /><br /><pre><code>#include &lt;iostream&gt;<br />#include &lt;string&gt;<br />using namespace std;<br /><br />class HelloWorld{<br />        string mensagem;<br />        public:<br />        HelloWorld(string mensagem) { // construtor!<br />                this-&gt;mensagem = mensagem;<br />        }<br />     <br />        void show() { // metodo show<br />                cout &lt;&lt; "mensagem: " &lt;&lt; this-&gt;mensagem &lt;&lt; endl;<br />        }<br />};<br />int main()<br />{<br />        HelloWorld obj("ola mundo");<br />        obj.show();<br />        return(0);<br />}<br /></code></pre><br /><br />Agora o mesmo código em Java:<br /><br /><pre><code>package Hello;<br /><br />public class HelloWorld{<br />        private String mensagem;<br />        public HelloWorld(String mensagem){ <br />                this.mensagem = mensagem;<br />        }<br />        public void show() { <br />                System.out.println("mensagem: " + mensagem);<br />        }<br />        public static void main(String [] args){<br />                HelloWorld obj = new HelloWorld("ola mundo");<br />                obj.show();<br />        }<br />}</code></pre><br /><br />Agora, percebam a simplicidade do Ruby:<br /><pre><code>class HelloWorld<br />        def initialize(mensagem)<br />                @mensagem = mensagem <br />        end<br />        def show <br />                puts "mensagem: #{@mensagem}"<br />        end<br />end<br /><br />obj = HelloWorld.new "ola mundo"<br />obj.show</code></pre><br /><br />Agora em Perl (sim, Perl!)<br /><pre><code>package HelloWorld;<br /><br />sub new<br />{<br />        my ($class, $mensagem) = @_;<br />        my $self = {  mensagem =&gt; $mensagem  };<br />        bless $self, $class; # abençoando a variavel!<br />        return $self;<br />}<br /><br />sub show<br />{<br />        my $self = shift; # sim, ela vem como argumento!<br />        print "mensagem: " . $self-&gt;{mensagem} . "\n";<br />}<br /><br />my $obj = new HelloWorld("ola mundo");<br />$obj-&gt;show(); # parece artificial, não?<br /><br />1;</code></pre><br /><br />PHP também é: <br /><pre><code>&lt;?php<br /><br />Class HelloWorld{<br />        var $mensagem = "";<br />        function HelloWorld($mensagem){<br />                $this-&gt;mensagem = $mensagem;<br />        }<br />        function show(){<br />                echo "mensagem : " . $this-&gt;mensagem . "&lt;br/&gt;";<br />        }<br />}<br /><br />$obj = new HelloWorld("ola mundo");<br />$obj-&gt;show();<br />?&gt;</code></pre><br /><br />Por fim, vamos criar um tipo usando JavaScript<br /><pre><code>function HelloWorld(mensagem){<br />        this.mensagem = mensagem;<br />        this.show = function(){<br />                alert("mensagem: " + this.mensagem);<br />        }<br />}<br /><br />var obj = new HelloWorld("ola mundo");<br />obj.show();</code></pre><br /><br />Edit: Python, atendendo a diversos pedidos<br /><pre><code>class HelloWorld:<br />    def __init__(self, arg):<br />        self.message = arg<br /><br />    def show(self):<br />        print "mensagem: ", self.message<br /><br />hello = HelloWorld("Ola Mundo")<br />hello.show()</code></pre><br /><br />A diferença entre uma linguagem e outra está (entre outras coisas) na sintaxe: em Perl eu tenho que criar os mecanismos na mão (com bless e receber $self) mas em Java e Ruby é tudo muito natural. Em Javascript eu não tenho uma construtor propriamente dito (muito menos classes) mas uma função (e crio um objeto dando um new nessa função). <br /><br />Vou abordar o tema "herança" no proximo post, espero que seja útil :)</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>douttorx</div>
<div class='content'>
Opa cara, que legal o post.<BR/>estava procurando hello world em C++.<BR/>um abraço.</div>
</div>
<div class='comment'>
<div class='author'>Cauê</div>
<div class='content'>
Oi cara!<BR/>Sou do Rio grande do sul e faço faculdade de Eng.Elétrica na Unipampa de Alegrete e vi um post teu em um site sobre um programa em C++ que precisava usar a biblioteca math.<BR/>Tirei uma duvida ali contigo pq não lembrava que tinha que passar o grau pra radianos antes de transformar.<BR/>Eu gostaria que se quando eu tiver alguma duvida eu posso te avisar e quem sabe evoluir meus conhecimentos em C++.<BR/>Abraço.<BR/>Meu msn é : caue_cmm@hotmail.com</div>
</div>
<div class='comment'>
<div class='author'>Marcelo Martins</div>
<div class='content'>
Bah, Perl dói o olho. hehe</div>
</div>
<div class='comment'>
<div class='author'>Airton Arantes</div>
<div class='content'>
Só para complementar o post do amigo,Olhem esse post no meu blog:<BR/><BR/>http://defopenblog.wordpress.com/2008/05/07/e-eu-que-pensei-que-ja-tinha-visto-de-tudo/</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
LG, pena que o comentario destruiu a indentação (que é fundamental no Python). Também esqueci do C#, mas é 99% igual ao Java.<BR/><BR/>Só não consegui fazer um exemplo em SmallTalk :(</div>
</div>
<div class='comment'>
<div class='author'>lg</div>
<div class='content'>
Tiago,<BR/><BR/>Muito bacana seu post. <BR/>Colaborando com a proposta do seu texto, fiz um código, em Python, que ficou assim:<BR/><BR/>class helloWord():<BR/>    def __init__(self, msg):<BR/>        self.hello_msg = msg<BR/>    def show(self):<BR/>        print self.hello_msg<BR/> <BR/>a = helloWord("Ola Mundo !")<BR/>a.show()<BR/><BR/>Abraços,<BR/>Luiz Guilherme <BR/>lg.aldabalde em  gmail.com</div>
</div>
<div class='comment'>
<div class='author'>Gallimimus</div>
<div class='content'>
Pô Thiago faltou em Shell Script ahahahah, abraços e parabéns pelo post.<BR/><BR/>Carlos Ferreira<BR/>http://carnivorosemdentes.blogspot.com/</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[TDD com Perl]]></title>
    <link href="http://pacman.blog.br/blog/2008/05/02/tdd-com-perl/"/>
    <updated>2008-05-02T15:00:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/05/02/tdd-com-perl</id>
    <content type="html"><![CDATA[<div class='post'>
É possivel fazer Test Driven Development com Perl? Mas claro :)<br /><br />Artigo interessante sobre <a href="http://perldoc.perl.org/Test/More.html">Test::More</a>:<br /><a href="http://www.testingreflections.com/node/view/5333">http://www.testingreflections.com/node/view/5333</a><br /><br />Tutorial bem sucinto:<br /><a href="http://www.wgz.org/chromatic/perl/IntroTestMore.pdf">http://www.wgz.org/chromatic/perl/IntroTestMore.pdf</a><br /><br />Excelente apresentação:<br /><a href="http://wellington.pm.org/archive/200606/tdd/">http://wellington.pm.org/archive/200606/tdd/</a></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Trabalho que é coisa séria ninguem comenta... ;-)</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programando em C para console -  parte 1]]></title>
    <link href="http://pacman.blog.br/blog/2008/04/02/programando-em-c-para-cons/"/>
    <updated>2008-04-02T14:10:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/04/02/programando-em-c-para-cons</id>
    <content type="html"><![CDATA[<div class='post'>
(Depois de um fecundo primeiro de Abril... )<br /><br />Cada vez mais eu me espanto com a quantidade de novatos que tentam fazer programas para o "modo console" que não fazem o menor sentido.<br /><br />Programas com menuzinho (1 - saque , 2 - deposito, 3 - sair) ou do estilo "digite um numero (q para sair)" são totalmente contra-produtivos. O novato perde TEMPO fazendo um monte de código desnecessário quando esquece o que deveria fazer (o tal do <span style="font-style:italic;">algoritmo</span>).<br /><br />Veja um exemplo: um programa que receba uma quantidade variavel de números e que imprima a soma dos mesmos. IMHO a forma mais interessante para fazer isso é pegar os números como argumentos do programa principal. Vc cria um programa console absolutamente limpo e facil de scriptar, por exemplo.<br /><br />Veja só:<br /><br /><pre><code>#include &lt;stdio.h&gt;<br /><br />int main(int argc, char *argv[]){<br />        double soma = 0.0;<br /><br />        printf("A soma dos numeros eh %g\n",soma);<br /><br />        return 0;<br />}</code></pre><br /><br />Feito esse simples arquivo, vamos compilar<br /><pre>$ gcc -Wall soma.c<br />$ ./a.out 1 2 3 4 5 <br />A soma dos numeros eh 0</pre><br /><br />Ai vc fala "po, ta errado!", mas claro, eu primeiro escrevi a base do meu programa. Perceba que eu compilei com a opção -Wall, que me informa todos os <span style="font-style:italic;">warnings</span> que a compilação pode gerar (o que sempre é uma excelente pratica, eu procuro compilar sempre com 0 warnings).<br /><br />Feito isso, vamos definir 2 coisas:<br /> - O algoritmo da soma e<br /> - Possiveis fluxos de excessão.<br /><br />Vou partir do suposto que, se vc digitar alguma coisa que não seja um numero, eu vou ignorar e considerar como 0. Caso eu não informe nenhum numero ao programa, isso significa que estou faltando com alguma coisa, nesse caso vou informar uma mensagem elucidativa sobre o uso do programa.<br /><br /><pre><code>#include &lt;stdio.h&gt;<br />#include &lt;stdlib.h&gt;<br /><br />int main(int argc, char *argv[]){<br />        int i;<br />        double soma = 0.0;<br /><br />        if(argc == 1){<br />                fprintf(stderr,"Faltando Argumentos!\n");<br />                fprintf(stderr,"Uso: %s x1 [ x2 .. xN ]\n",argv[0]);<br />                return 1;<br />        }<br /><br />        for(i=1;i&lt;argc;i++) <br />                soma += atof(argv[i]);<br /><br />        printf("A soma dos numeros eh %g\n",soma);<br /><br />        return 0;<br />}</code></pre><br /><br />Todos os argumentos que eu passo para o programa, incluindo o nome do mesmo, ficam no vetor <span style="font-weight:bold;">argv</span>, e o número de argumentos fica na variavel <span style="font-weight:bold;">arcc</span>. Dessa forma, o nome do programa é o argv[0] e, se eu não passar nenhum argumento adicional, argc será 1. A função atof converte a string para um número de ponto flutuante e retorna 0 se não for possivel converter.<br /><br />Simples, não? Agora vamos executar:<br /><br /><pre>$ ./a.out          <br />Faltando Argumentos!<br />Uso: ./a.out x1 [ x2 .. xN ]<br />$ echo $?<br />1<br />$ ./a.out 1 2 3 4 5<br />A soma dos numeros eh 15<br />$ echo $?<br />0</pre><br /><br />A mensagem de uso utiliza uma notação no manual de alguns programas do mundo unix: colocar os argumentos opcionais entre colchetes. Eu informo que preciso de pelo menos <span style="font-weight:bold;">um</span> argumento. Caso eu entre no fluxo de excessão, o meu main retorna um valor diferente de 0 para o sistema operacional que pode ser capturado pela variavel de ambiente $? (nesse caso estou em um linux utilizando o bash, em outros sistemas mais exotéricos como o Windows eu não imagino como vc poderia capturar essa informação, tampouco imagino se ela seria util).<br /><br />Perceba que eu posso criar um script extremamente simples para utilizar esse programa, assim como testar o resultado é uma tarefa de um grep (ou diff). Eu poderia juntar um script de teste e um makefile nesse post mas estou esperando um exemplo um pouco mais interessante.<br /><br />Eu criei um programa sucinto, facil de entender e muito util, sem ter que perguntar para o usuario nada. transformar esse programa num que calcula a média, por exemplo, é uma tarefa de colocar apenas uma linha (na verdade uma subtração e uma divisão) a mais. Espero que os programadores novatos se inspirem nessa forma de pensar e que utilizem os programas básicos do unix como o grep, cat, diff, cp, etc, para seus futuros trabalhos.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Felipe</div>
<div class='content'>
Aguardando....<BR/><BR/>OFF: As mentiras de ontem forma muito engraçadas, a do Java mesmo :-)</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Felipem, o GDB por si só precisaria de um post exclusivo. Tenho que pensar bem no exemplo para que seja util.<BR/><BR/>Estou pensando num algoritmo de ordenação com algum <I>errinho</I>, ou algum processo recursivo como calcular fibonacci, etc.</div>
</div>
<div class='comment'>
<div class='author'>Felipe</div>
<div class='content'>
Poucos sabem o que é um UNIX. Programam no DOS usando um while(1) para não fechar a tela do DOS, não sabem nem ir no cmd e digitar o nome do programa, eles clicam no executável.<BR/><BR/>O C é uma linaguagem que os programadores mais comuns não sabem/se interessam. Ler o TCPL sem entender o que é um wc, grep, sort... é IMHO impossível.<BR/><BR/>Aguardo os posts sobre getopt e GDB(ah sim GDB não está na lista de "promessas", mas vai ter, vai?)</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Duas coisas que esqueci de comentar: <BR/><BR/>1) As mensagens de erro vão para a saida de erro (stderr)<BR/><BR/>2) A mensagem "A soma dos numeros eh " é totalmente desnecessária. Inclusive seria mais sucinto se a resposta fosse apenas o valor numérico.<BR/><BR/>fica para a proxima então: scripts de teste, makefile, getopt (posso querer utilizar uma opção -v [verbose]) e, se der tempo, localização!</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
