<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: AOP | Peczenyj's Blog]]></title>
  <link href="http://pacman.blog.br/blog/categories/aop/atom.xml" rel="self"/>
  <link href="http://pacman.blog.br/"/>
  <updated>2014-02-08T16:51:23-02:00</updated>
  <id>http://pacman.blog.br/</id>
  <author>
    <name><![CDATA[Tiago Peczenyj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[MooseX - a new Ruby DSL for Object Oriented Programming (and much more)]]></title>
    <link href="http://pacman.blog.br/blog/2014/02/07/moosex-a-new-ruby-dsl-for-object-oriented-programming-and-much-more/"/>
    <updated>2014-02-07T20:13:00-02:00</updated>
    <id>http://pacman.blog.br/blog/2014/02/07/moosex-a-new-ruby-dsl-for-object-oriented-programming-and-much-more</id>
    <content type="html"><![CDATA[<p>MooseX is a postmodern object DSL for Ruby <a href="https://travis-ci.org/peczenyj/MooseX"><img src="https://travis-ci.org/peczenyj/MooseX.png" alt="Build Status" /></a> <a href="http://badge.fury.io/rb/moosex"><img src="https://badge.fury.io/rb/moosex.png" alt="Gem Version" /></a></p>

<p>This is a DSL for object creation, aspects, method delegation and much more. It is based on Perl Moose and Moo, two important modules who add a better way of Object Orientation development (and I enjoy A LOT). Using a declarative stype, using Moose/Moo you can create attributes, methods, the entire constructor and much more. But I can't find something similar in Ruby world, so I decide port a small subset of Moose to create a powerfull DSL for object construction.</p>

<p>Of course, there is few similar projects in ruby like</p>

<ul>
<li><a href="https://github.com/solnic/virtus">Virtus</a></li>
<li><a href="http://edgeguides.rubyonrails.org/active_record_validations.html">Active Record Validations</a></li>
</ul>


<p>But the objetive of MooseX is different: this is a toolbox to create Classes based on DSL, with unique features like</p>

<ul>
<li>method delegation ( see 'handles')</li>
<li>lazy attributes</li>
<li>roles</li>
<li>parameterized roles</li>
<li>composable type check</li>
<li>events</li>
</ul>


<p>and much more.</p>

<p>This rubygem is based on this modules:</p>

<ul>
<li><a href="http://search.cpan.org/~ether/Moose-2.1204/lib/Moose.pm">Perl Moose</a></li>
<li><a href="http://search.cpan.org/~ether/Moose-2.1204/lib/Moose.pm">Perl Moo</a></li>
<li><a href="http://search.cpan.org/~mateu/MooX-Types-MooseLike-0.25/lib/MooX/Types/MooseLike/Base.pm">MooX::Types::MooseLike::Base</a></li>
<li><a href="http://search.cpan.org/~winter/MooseX-Event-v0.2.0/lib/MooseX/Event.pm">MooseX::Event</a></li>
<li><a href="http://search.cpan.org/~sartak/MooseX-Role-Parameterized-1.02/lib/MooseX/Role/Parameterized/Tutorial.pod">MooseX::Role::Parameterized</a></li>
</ul>


<p>See also:</p>

<ul>
<li><a href="https://code.google.com/p/joose-js/">Joose</a>, a javascript port of Moose.</li>
<li><a href="http://en.wikipedia.org/wiki/Perl_6#Object-oriented_programming">Perl 6</a> Perl 6 OO programming style.</li>
</ul>


<p>Why MooseX? Because the namespace MooseX/MooX is open to third-party projects/plugins/extensions. You can upgrade your Moo(se) class using other components if you want. And there is one gem called 'moose' :/</p>

<p>THIS MODULE IS EXPERIMENTAL YET! BE CAREFUL!</p>

<p>Talk is cheap. Show me the code!</p>

<p>```ruby
require 'moosex'</p>

<p>class Point
  include MooseX</p>

<p>  has x: {</p>

<pre><code>is: :rw,      # read-write (mandatory)
isa: Integer, # should be Integer
default: 0,   # default value is 0 (constant)
</code></pre>

<p>  }</p>

<p>  has y: {</p>

<pre><code>is: :rw,
isa: Integer,
default: lambda { 0 }, # you should specify a lambda
</code></pre>

<p>  }</p>

<p>  def clear!</p>

<pre><code>self.x= 0     # to run with type-check you must
self.y= 0     # use the setter instad @x=
</code></pre>

<p>  end
end</p>

<h1>now you have a generic constructor</h1>

<p>p1  = Point.new                       # x and y will be 0
p2  = Point.new( x:  5 )              # y will be 0
p3  = Point.new( x:  5, y: 4)
```</p>

<!-- more -->


<h2>Installation</h2>

<p>Add this line to your application's Gemfile:</p>

<pre><code>gem 'moosex'
</code></pre>

<p>And then execute:</p>

<pre><code>$ bundle
</code></pre>

<p>Or install it yourself as:</p>

<pre><code>$ gem install moosex
</code></pre>

<p>You need ruby 2.0.x or superior.</p>

<h2>Description</h2>

<p>MooseX is an extension of Ruby object system. The main goal of MooseX is to make Ruby Object Oriented programming easier, more consistent, and less tedious. With MooseX you can think more about what you want to do and less about the mechanics of OOP. It is a port of Moose/Moo from Perl to Ruby world.</p>

<p>Read more about Moose on http://moose.iinteractive.com/en/</p>

<h2>Motivation</h2>

<p>It is fun</p>

<h2>Usage</h2>

<p>You just need include the MooseX module in your class and start to describe the attributes with our DSL. This module will inject one smart constructor, acessor and other necessary methods.</p>

<p>Instead the normal way of add accessors, constructor, validation, etc</p>

<p>```ruby
class Foo
  attr_accessor :bar, :baz, :bam</p>

<p>  def initialize(bar=0, baz=0, bam=0)</p>

<pre><code>unless [bar, baz, bam].all? {|x| x.is_a? Integer }
  raise "you should use only Integers to build Foo"
end
@bar = bar
@baz = baz
@bam = bam
</code></pre>

<p>  end
end
```
you can do this:</p>

<p>```ruby
class Foo
  include MooseX</p>

<p>  has [:bar, :baz, :bam], {</p>

<pre><code>is: :rw,
isa: Integer,
default: 0
</code></pre>

<p>  }
end
```</p>

<h2>Contributing</h2>

<ol>
<li>Fork it ( http://github.com/peczenyj/MooseX/fork )</li>
<li>Create your feature branch (<code>git checkout -b my-new-feature</code>)</li>
<li>Commit your changes (<code>git commit -am 'Add some feature'</code>)</li>
<li>Push to the branch (<code>git push origin my-new-feature</code>)</li>
<li>Create new Pull Request Push to the branch (<code>git push origin my-new-feature</code>)</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding a 'dry run' capability to your Moose class with MooseX::Role::DryRunnable]]></title>
    <link href="http://pacman.blog.br/blog/2013/04/07/adding-a-dry-run-capability-to-your-moose-class-with-moosex-role-dryrunnable/"/>
    <updated>2013-04-07T09:55:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2013/04/07/adding-a-dry-run-capability-to-your-moose-class-with-moosex-role-dryrunnable</id>
    <content type="html"><![CDATA[<p>A 'dry run' is a testing process where the effects of a possible failure are intentionally mitigated. For example, an aerospace company may conduct a "dry run" test of a jet's new pilot ejection seat while the jet is parked on the ground, rather than while it is in flight. Or, in software development, we can change the behavior of some methods in order to test, like avoid change data into a database (logging the action instead).</p>

<p>There are many ways to implement this capability. For example, we can add an explicity return in each method and test some condition. I will show some options in this article and we will find how to use the module <a href="https://metacpan.org/module/MooseX::Role::DryRunnable">MooseX::Role::DryRunnable</a> in our Moose classes (Perl).</p>

<p>One simple example in Perl, reading from an environment variable <code>DRY_RUN</code>.</p>

<p>```perl</p>

<p>package Foo;</p>

<p>sub bar {</p>

<pre><code>logger-&gt;debug("Foo::bar @_");
return if $ENV{'DRY_RUN'};
...
</code></pre>

<p>}
```</p>

<!--more-->


<p>In this example, the <code>bar</code> method change something in the database and my test is very simple, like a simple diff between log files. To test my application in dry run (to test in the product environment, for example, without a big risk), we can do this:</p>

<p><code>
bash$ DRY_RUN=1 ./my-application.pl --other-options
</code></p>

<p>Sounds good, for large systems, with a good number of modules, it can be a problem. For example, the method <code>bar</code> has two or three responsabilities: logging the parameters, doing the original job and do nothing if we are in the <code>dry run</code> state. This method is doing a lot of things, and I have the same code in multiple places. Lets think about reuse of this code, using OO principles.</p>

<p>```perl</p>

<p>package FooBase;</p>

<p>sub bar {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>package Foo;
use base 'FooBase';</p>

<p>sub bar {</p>

<pre><code>logger-&gt;debug("Foo::bar @_");
return if $ENV{'DRY_RUN'};

my $self = shift;
$self-&gt;SUPER::bar(@_);
</code></pre>

<p>}
```</p>

<p>Now it is interesting: my Foo class has just one job: dispatch (or not) the method call to FooBase (who knows our business rule). But we still have the problem of the same code in multiple places. Lets try to solve this with Aspect Oriented Programming, using Moose.</p>

<p>```perl
package Foo;
use Moose;</p>

<p>sub bar {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>sub baz {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>around [ qw(bar baz) ] => sub {</p>

<pre><code>my $orig = shift;
my $self = shift;

logger-&gt;debug("Foo::bar @_");
return if $ENV{'DRY_RUN'};

$self-&gt;$orig(@_)
</code></pre>

<p>}
```</p>

<p>Moose is a complete object system for Perl 5. Consider any modern object-oriented language (which Perl 5 definitely isn't). It provides keywords for attribute declaration, object construction, inheritance, and maybe more. In this example, we can use the Method Modifier <code>around</code> and we can inject this new piece of code in one or more methods. But we still need add this hook in each class, this is why I create the <a href="https://metacpan.org/module/MooseX::Role::DryRunnable">MooseX::Role::DryRunnable</a>.</p>

<p>Moose has a great number of features, like Roles. Roles have two primary purposes: as interfaces, and as a means of code reuse. In our example we can do this:</p>

<p>```perl
package DryRunnable;
use Moose::Role;</p>

<p>requires 'in_dry_run';
requires 'on_dry_run';</p>

<p>package Foo;
use Moose;
with 'DryRunnable';</p>

<p>sub bar {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>sub baz {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>sub is_dry_run {</p>

<pre><code>$ENV{'DRY_RUN'}
</code></pre>

<p>}</p>

<p>sub on_dry_run {</p>

<pre><code>logger-&gt;debug("Foo::bar @_")
</code></pre>

<p>}</p>

<p>around [ qw(bar baz) ] => sub {</p>

<pre><code>my $orig = shift;
my $self = shift;

$self-&gt;is_dry_run()
    ? $self-&gt;on_dry_run(@_)
    : $self-&gt;$orig(@_)
</code></pre>

<p>}
```</p>

<p>In this example, the role DryRunnable provides the basic infrastructure to add the dry run capability. Instead ask direclty to an environment variable I'm asking to a method ( <code>is_dry_run</code> ), and instead only log / return nothing we call another method to do this ( <code>on_dry_run</code> ). Using this kind of pattern it is easy to inject the correct <code>around</code> statement using, for example, <a href="https://metacpan.org/module/MooseX::Role::Parameterized">MooseX::Role::Parameterized</a>. With a parameterized role, we can set the list of methods in a Objected Oriented way, with more code reuse and less copy/paste. This is the base of <a href="https://metacpan.org/module/MooseX::Role::DryRunnable">MooseX::Role::DryRunnable</a>.</p>

<p>```perl
package Foo;
use Moose;</p>

<p>with 'MooseX::Role::DryRunnable' => {
  methods => [ qw(bar baz) ]
};</p>

<p>has dry_run => (is => 'ro', isa => 'Bool', default => 0);</p>

<p>sub bar {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>sub baz {</p>

<pre><code>...
</code></pre>

<p>}</p>

<p>sub is_dry_run { # required, should return a boolean
  shift->dry_run
}</p>

<p>sub on_dry_run { # required, will receive the name of the method and the list of arguments
  my $self   = shift;
  my $method = shift;
  $self->logger("Dry Run method=$method, args: \n", @_);
}
```</p>

<p>The code of this role is simple, and we can set the list of the methods as a parameter.</p>

<p>```perl
package MooseX::Role::DryRunnable;
use MooseX::Role::Parameterized;</p>

<p>parameter methods => (
  traits  => ['Array'],
  is      => 'ro',
  isa     => 'ArrayRef[Str]',
  default => sub { [] },
  handles => { all_methods => 'elements' },
);</p>

<p>role {
  my $p = shift;</p>

<p>  requires 'is_dry_run';
  requires 'on_dry_run';</p>

<p>  foreach my $method ($p->all_methods){</p>

<pre><code>around $method =&gt; sub { 
    my $code  = shift;
    my $self  = shift;

    $self-&gt;is_dry_run() 
      ? $self-&gt;on_dry_run($method,@_) 
      : $self-&gt;$code(@_)  
  }
</code></pre>

<p>  }
};</p>

<p>1;
```</p>

<p>I can extend the original role to provide a basic version of <code>is_dry_run</code> and <code>on_dry_run</code> for my set of Moose classes and write less code, overriding if I need something more specific for some class. And this is how we can deal with Aspect Oriented Programming in Perl, using Moose.</p>

<p>But this is not the only way to do this. I can use <a href="https://metacpan.org/module/Monkey::Patch">Monkey::Patch</a> or  <a href="https://metacpan.org/module/Aspect">Aspect</a> to add the same behavior, there are many good options to do the same thing.</p>

<p>And there are many applications of this technique. If we identify a good reason to change the behavior of some class in runtime, like activate some modules or features (based on configuration, timedate, environment variables, etc), we can do something like this.</p>
]]></content>
  </entry>
  
</feed>
