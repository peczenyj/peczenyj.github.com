<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Shell | Peczenyj's Blog]]></title>
  <link href="http://pacman.blog.br/blog/categories/shell/atom.xml" rel="self"/>
  <link href="http://pacman.blog.br/"/>
  <updated>2014-02-08T16:51:23-02:00</updated>
  <id>http://pacman.blog.br/</id>
  <author>
    <name><![CDATA[Tiago Peczenyj]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Tabela do Brasileirão 2008 com links + sed]]></title>
    <link href="http://pacman.blog.br/blog/2008/06/18/tabela-do-brasileiro-2008-com-links-sed/"/>
    <updated>2008-06-18T15:15:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/06/18/tabela-do-brasileiro-2008-com-links-sed</id>
    <content type="html"><![CDATA[<div class='post'>
O sed é um processador de texto muito versátil.<br /><br />O links é um browser modo texto com features tão interessantes quanto do antigo lynx.<br /><br />Ano passado eu <a href="http://peczenyj.blogspot.com/2007/06/classificao-do-brasileiro-via-shell.html">postei</a> como imprimir a tabela do brasileirão com um one liner interessante. Agora eu resolvi beber de outra fonte:<br /><br /><pre><code>#!/bin/bash<br />TIME=Internacional<br />COLOR=$(echo -ne '\e[31;1m&\e[m')<br />URL=http://globoesporte.globo.com/Esportes/Futebol/Classificacao/0,,ESP0-9827,00.html<br />links --dump ${URL} | sed -r 's/\[[0-9]*\]//;/(^[0-9]|J jogos)/!d' | sed "s/${TIME}/${COLOR}/<br />         1a-----Libertadores----------<br />         4a-----Pre-Libertadores------<br />         5a-----Sul-Americana---------<br />        13a---------------------------<br />        17a-----Rebaixado-------------"</pre></code><br /><br />O resultado não é tão bom quanto o do ano passado, é verdade, mas não deixa de ser uma alternativa</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Alan Carvalho de Assis</div>
<div class='content'>
Ola Tiago,<BR/>gostei do script, muito fera.<BR/><BR/>Um abraço,<BR/><BR/>Alan</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Dê tempo ao tempo... ;-)</div>
</div>
<div class='comment'>
<div class='author'>Ivan Brasil Fuzzer</div>
<div class='content'>
Com poucas alterações no script até o resultado melhora.<BR/>Os bugs encontrados estão na cor e no time!<BR/>Mudando para azul e Gremio fica bem melhor :-P<BR/><BR/>Abraços.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Pesquisando nos Grupos do Yahoo]]></title>
    <link href="http://pacman.blog.br/blog/2008/05/28/pesquisando-nos-grupos-do-yahoo/"/>
    <updated>2008-05-28T18:17:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/05/28/pesquisando-nos-grupos-do-yahoo</id>
    <content type="html"><![CDATA[<div class='post'>
Meu amigo MrBits me deu essa grande ideia:<br /><br /><pre><code>#!/bin/bash<br />QTDE=20<br />CHARSET=UTF-8<br />GROUP=shell-script<br /><br />while getopts g:c:q: OPTION ; do<br />        case $OPTION in<br />        g) GROUP=$OPTARG ;;<br />        c) CHARSET=$OPTARG ;;<br />        q) QTDE=$OPTARG ;;<br />        esac<br />done<br /><br />shift $(($OPTIND -1))<br /><br />SEARCH="$@"<br /><br />if [ -z "$SEARCH" ]; then <br />        echo "Usage: $(basename $0) [-q qtde] [-g grupo] [-c charset] search" <br />        exit 1<br />fi<br /><br />BASEURL="http://br.groups.yahoo.com/group"<br />URL="${BASEURL}/${GROUP}/msearch?submit=OK&charset=${CHARSET}&cnt=${QTDE}&query=${SEARCH// /+}"  <br />SEDCMD="/message/!d;/${GROUP}/!d;/.*[0-9]/!d;s#/group#${BASEURL}#g;s/<[^>]*span>//g;s/$/&lt;br \/&gt;/"<br /><br />LYNXOPT="-dump -force_html -assume_charset=${CHARSET}"<br />lynx $LYNXOPT <(  curl -b /tmp/cookie$$ -sL "${URL}" |  sed "${SEDCMD}" )</code></pre><br /><br />Vejamos em uso:<br /><pre>$ ./find.sh              <br />Usage: find.sh [-q qtde] [-g grupo] [-c charset] search<br /><br />$ ./find.sh -q 10 getopts # procurando por getopts limitando a 10 registros<br />   [1]Re: [shell-script] Script de busca de mensagens<br />   [2]Re: [shell-script] Re: script iterativo / passo a passo<br />   [3]Re: [shell-script] Script de Backup<br />   [4]Re: [shell-script] Script de Backup<br />   [5]Re: [shell-script] Script de Backup<br />   [6]Re: [shell-script] Script de Backup<br />   [7]Re: [shell-script] Echo e executa: superecho<br />   [8]Re: [shell-script] testar se parametro $1 foi passado<br />   [9]Re: [shell-script] Echo e executa: superecho<br />   [10]Re: [shell-script] testar se parametro $1 foi passado<br /><br />References<br /><br />   1. http://br.groups.yahoo.com/group/shell-script/message/26373<br />   2. http://br.groups.yahoo.com/group/shell-script/message/26204<br />   3. http://br.groups.yahoo.com/group/shell-script/message/26078<br />   4. http://br.groups.yahoo.com/group/shell-script/message/26076<br />   5. http://br.groups.yahoo.com/group/shell-script/message/26075<br />   6. http://br.groups.yahoo.com/group/shell-script/message/26072<br />   7. http://br.groups.yahoo.com/group/shell-script/message/25742<br />   8. http://br.groups.yahoo.com/group/shell-script/message/25720<br />   9. http://br.groups.yahoo.com/group/shell-script/message/25719<br />  10. http://br.groups.yahoo.com/group/shell-script/message/25718</pre><br /><br />Divertido, não? o default é procurar no grupo shell-script do yahoo, mas ele pode investigar em qualquer um.<br /><br />Valeu Mr.Bits!!</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Hahaha... te amarrou, gc?<BR/><BR/>Podes usar pra pesquisar no rioguj ;-)</div>
</div>
<div class='comment'>
<div class='author'>Guilherme Chapiewski</div>
<div class='content'>
\o/<BR/><BR/>É por isso que bash é a melhor coisa de todo o universo!!!</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
Mas é facil, Roger!<BR/><BR/>/padrão/!d -> apaga *todas* as linhas que *não* casam com o padrão<BR/><BR/>s/padrão/substituição/g -> substitui, globalmente, o padrão pela substituição<BR/><BR/>s#xxx#yyy#g -> mesma coisa, util para não ter que escapar o caracter /</div>
</div>
<div class='comment'>
<div class='author'>Roger Leite</div>
<div class='content'>
Putz Tiago ! Você tá ficando muito louco mesmo, deve ser o sol ai do Rio ... não é possível !<BR/><BR/>Estes comandos de sed são de arrepiar, um dia ainda vou entender isso "nativo".<BR/><BR/>flw e sucesso!</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
VB ? NUNCA!!!<BR/><BR/>Mas ja fiz coisas com VBScript... :$</div>
</div>
<div class='comment'>
<div class='author'>Marcelo Martins</div>
<div class='content'>
Tiago, tu ta ficando cada vez pior cara. Já pensou em dar um tempo e programar um pouco em Visual Basic?<BR/><BR/><BR/>hehe.. muito bom!</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Manipulando logs com AWK e SED]]></title>
    <link href="http://pacman.blog.br/blog/2008/04/26/manipulando-logs-com-awk-e-sed/"/>
    <updated>2008-04-26T14:41:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/04/26/manipulando-logs-com-awk-e-sed</id>
    <content type="html"><![CDATA[<div class='post'>
Eis que a lista de <a href="http://br.groups.yahoo.com/group/shell-script/">shell script</a> traz um bom desafio.<br /><br /><cite>Galera, tenho o seguinte log.:<br /><br />AAAA-------------campo_1-------------campo_2-----campo_3----campo_4---------- <br />teste_1 371508787 371547453 38666 testetesteteste<br /><br />BBBB-------------campo_1-------------campo_2-----campo_3----campo_4---------- <br />teste_2 4625081503 4651313710 26232207 testetesteteste<br /><br />Estou a tentar usar o awk com a seguinte função : <br />awk '$1~"teste_" {print $5";"$4}' teste > teste_.csv<br /><br />a funcao busca realmente o que desejo:<br />$5 $4<br />testetesteteste 38666<br />testetesteteste 6232207<br /><br />porem,, gostaria que seprasse da forma:<br /><br />AAAA------------- <br />testetesteteste 38666 <br />BBBB------------- <br />testetesteteste 26232207 <br /><br />Alguém tem uma dica de como fazer?</cite><br /><br />Ah... o bom e velho <span style="font-weight:bold;">SED</span> pode resolver isso<br /><br /><code>$ sed -rn '/(^[^-]+-+).*/{s//\1/;h};<br />/^teste_/{s/.* ([^ ]+) +([^ ]+$)/\2 \1/;x;p;g;p}' arquivo.log<br />AAAA-------------<br />testetesteteste 38666<br />BBBB-------------<br />testetesteteste 26232207</code><br /><br />Ok, ok, ta muito complicado, mas veja só:<br /><br /><code>$ sed -rn '/^[^-]+-+/h;/^teste_/{x;p;g;p}' arquivo.log <br />AAAA-------------campo_1-------------campo_2-----campo_3----campo_4----------<br />teste_1 371508787 371547453 38666 testetesteteste<br />BBBB-------------campo_1-------------campo_2-----campo_3----campo_4----------<br />teste_2 4625081503 4651313710 26232207 testetesteteste</code><br /><br />Vamos explicar<br />1) a opção -n serve para informar ao sed "imprima apenas quando eu mandar"<br />2) a opção -p serve para utilizar expressões regulares extendidas<br />(assim não preciso escapar o quantificador + , que significa "um ou<br />mais vezes", assim como os parentesis, para informar os grupos).<br /><br />Eu fiz uma sacanagem. o comando h quarda o padrão num espaço chamado espaço reserva, tipo uma memória do sed, sobreescrevendo. Assim no espaço reserva eu tenho a ultima ocorrencia de uma linha do tipo,  ^[^-]+-+      ,que traduzindo significa: tudo o que começa com um ou varios caracteres diferentes de -, seguidos de um ou varios - (no caso<br />do AAAA------------- ... ).<br /><br />Agora, quando eu encontro uma linha que começa com teste_ eu:<br /><br />x) troco essa linha com a linha que esta na memória (a atual<br />'teste_...' vai, outra volta).<br />p) imprimo a linha que veio (AAAA---------- ...)<br />g) pego a linha da memória (teste_...)<br />p) imprimo a linha cachorrona<br /><br />Só que não fica como vc quer. Ai vc precisa fazer a sacanagem:<br /><br /><span style="font-style:italic;">se uma linha NÃO tem o que eu quero, então eu a manipulo habilmente<br />até que ela chegue ao que eu quero</span><br /><br />Eu poderia ter usado varias tecnicas mas... uma vez com sed, podemos continuar nele.<br /><br /><code>$ sed -rn '/(^[^-]+-+).*/{s//\1/;h};<br />/^teste_/{s/.* ([^ ]+) +([^ ]+$)/\2 \1/;x;p;g;p}' arquivo.log</code><br /><br />eu transformei a primera ER em  (minha_ER).* -- ou seja, criei um <span style="font-style:italic;">grupo</span> para o que me interessa. basta fazer:<br /><br /><code>s/(minha_ER).*/\1/</code><br /><br />para que toda a linha seja reduzida ao que a minha ER casa. em outras palavras, eu apaguei o resto da linha.<br /><br />na outra eu fui mais sacana pois eu tenho 2 grupos e troco toda a linha pelos grupos, na ordem inversa. coisa de quem toma muito café e não tem escrupulos.<br /><br />Vamos ver a versão <span style="font-weight:bold;">AWK</span>?<br /><br /><code>$ awk '/^[^-]+-+/{match($0,/^[^-]+-+/); x=substr($0,1,RLENGTH)}<br />/^teste_/{print x,"\n"$5,$4}' arquivo.log<br />AAAA-------------<br />testetesteteste 38666<br />BBBB-------------<br />testetesteteste 26232207</code><br /><br />x, nesse caso, armazena aquele pedaço da linha anterior, que eu descobri o que é via match. match procura uma expressão regular numa string, nesse caso em $0, e seta um valor na variavel RLENGTH, que é onde a expressão acaba. basta pegar essa parte da string e guardar na variavel x, que sera lida depois.<br /><br />Aqui fala um pouco dessas duas funções: <a href="http://people.cs.uu.nl/piet/docs/nawk/nawk_92.html">http://people.cs.uu.nl/piet/docs/nawk/nawk_92.html</a><br /><br />Eu poderia ter resolvido dessa forma também<br /><code>$ awk '/^[^-]+-+/{sub(/-[^-]+.*$/,"-");x=$0} <br />/^teste_/{print x,"\n"$5,$4}' arquivo.log<br />AAAA-------------<br />testetesteteste 38666<br />BBBB-------------<br />testetesteteste 26232207</code><br /><br />Entretanto aqui eu faço uma substituição grosseira do resto da linha que tem o AAAA------... por -, abusando do .* (e o fato dele ser guloso). Parece mais simples, mas está sujeito à falhas, embora não consigo pensar em nenhuma situação que seja possivem demonstrar.<br /><br />AWK & SED são ferramentas sensacionais para esse tipo de problema ;-)</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>blpsilva</div>
<div class='content'>
Impressive, to say the least :)<BR/><BR/>Acho que chegou a hora de limpar a minha ferrugem e reler o Advanced Bash Scripting Guide.<BR/><BR/>You produce some quite nice pearls inside the shell ;)</div>
</div>
<div class='comment'>
<div class='author'>Tiago Peczenyj</div>
<div class='content'>
grep + awk + sed:<BR/><BR/>$ grep -B 1 teste_ arquivo.log | \<BR/>awk '/teste_/{print $5,$4; next} 1' | \<BR/>sed -r '/^--$/d;s/(^[^-]+-+)[^-].*/\1/'<BR/><BR/>AAAA-------------<BR/>testetesteteste 38666<BR/>BBBB-------------<BR/>testetesteteste 26232207</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Um corretor ortográfico em gawk]]></title>
    <link href="http://pacman.blog.br/blog/2008/04/13/um-corretor-ortogrfico-em-gawk/"/>
    <updated>2008-04-13T14:39:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/04/13/um-corretor-ortogrfico-em-gawk</id>
    <content type="html"><![CDATA[<div class='post'>
Ano passado eu publiquei <a href="http://peczenyj.blogspot.com/2007/08/implementando-um-corretor-ortogrfico.html">uma pequena nota sobre um pequeno corretor ortográfico feito em Python</a>.<br /><br />No <a href="http://norvig.com/spell-correct.html">artigo</a> do Peter Norwig, ele explica o principio estatístico do algoritmo. No final, ele mostra varias implementações do algoritmo (em D, Java, Ruby e até Erlang).<br /><br />Depois de muito pesquisar, decidi fazer uma versão em gawk. A primeira tinha 30 linhas e não funcionava muito bem, arrumando e testando cheguei a esta forma final com apenas 15 linhas.<br /><br />Eu chamo de linha um <span style="font-style:italic;">statement</span> completo do awk. Perceba que nenhuma linha dessas possui o separador de statement <span style="font-weight:bold;">;</span> (ponto-e-virgula), exceto quando estou utilizando o for no estilo C.<br /><br /><pre><code># Usage: gawk -v word=something -f thisfile.awk [ big.txt [ big2.txt ... ]]<br /># Gawk version with 15 lines -- 04/13/2008<br /># Author: tiago (dot) peczenyj (at) gmail (dot) com <br /># Based on : http://norvig.com/spell-correct.html<br />function edits(w,max,candidates,list,        i,j){<br />       for(i=0;i<  max ;++i) ++list[substr(w,0,i) substr(w,i+2)]  <br />       for(i=0;i< max-1;++i) ++list[substr(w,0,i) substr(w,i+2,1) substr(w,i+1,1) substr(w,i+3)] <br />       for(i=0;i<  max ;++i) for(j in alpha) ++list[substr(w,0,i) alpha[j] substr(w,i+2)] <br />       for(i=0;i<= max ;++i) for(j in alpha) ++list[substr(w,0,i) alpha[j] substr(w,i+1)] <br />       for(i in list) if(i in NWORDS) candidates[i] = NWORDS[i] }<br /><br />function correct(word            ,candidates,i,list,max,temp){<br />       edits(word,length(word),candidates,list)<br />       if (!asort(candidates,temp)) for(i in list) edits(i,length(i),candidates)<br />       return (max = asorti(candidates)) ? candidates[max] : word }<br /><br />BEGIN{ if (ARGC == 1) ARGV[ARGC++] = "big.txt" # http://norvig.com/big.txt<br />       while(++i<=length(x="abcdefghijklmnopqrstuvwxyz")) alpha[i]=substr(x,i,1)<br />       IGNORECASE=RS="[^"x"]+" }<br /><br />{      ++NWORDS[tolower($1)]   }<br /><br />END{   print (word in NWORDS) ? word : "correct("word")=> " correct(tolower(word)) }</code></pre><br /><br />Veja o script em funcionamento:<br /><pre>$ time gawk -v word=somethink -f spelling.awk<br />correct(somethink)=> something<br /><br />real    0m4.862s<br />user    0m4.702s<br />sys     0m0.093s</pre></div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Rael</div>
<div class='content'>
Tiago, mais uma vez, parabéns!<BR/>É muito divertido mexer com estas coisas, não?<BR/>Ah, eu não esqueci de te mandar a versão otimizada em Java... eu só não achei seu email pra enviar! :P<BR/>Me manda um email, e eu te dou reply!</div>
</div>
<div class='comment'>
<div class='author'>Tiago Albineli Motta</div>
<div class='content'>
Corretor ortográfico, tatuagem... esse foi um final de semana divertido pra você heim! hahahha</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hackeando um Hello World com sed]]></title>
    <link href="http://pacman.blog.br/blog/2008/03/28/hackeando-um-hello-world-com-sed/"/>
    <updated>2008-03-28T17:55:00-03:00</updated>
    <id>http://pacman.blog.br/blog/2008/03/28/hackeando-um-hello-world-com-sed</id>
    <content type="html"><![CDATA[<div class='post'>
Fantástico o que o sed pode fazer!<br /><br /><pre><code>$ cat a.c<br />main(){ <br />     puts("hello world"); <br />}<br />$ gcc a.c<br />$ ./a.out <br />hello world<br />$ sed -i 's/hello world/_ola mundo_/'./a.out <br />$ ./a.out <br />_ola mundo_</code></pre></div>

]]></content>
  </entry>
  
</feed>
